#separator:tab
#html:true
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the emphasis of Python code?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the emphasis of Python code?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Code readability</p></div>
            
            <div class=""prettify-tags"">python style</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>(2 + 3) * 4</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>(2 + 3) * 4</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>20</p></div>
            
            <div class=""prettify-tags"">operations python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>2 + 3 * 4</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>2 + 3 * 4</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>14</p></div>
            
            <div class=""prettify-tags"">operations python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>2/5 == 0.4</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>2/5 == 0.4</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>True, 2/5 equals 0.4.</p></div>
            
            <div class=""prettify-tags"">fractions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What algorithm did Python switch to from version 3.11 onward?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What algorithm did Python switch to from version 3.11 onward?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Powersort</p></div>
            
            <div class=""prettify-tags"">algorithms python sorting</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method is used to sort a list in ascending order?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method is used to sort a list in ascending order?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;list&gt;.sort()</p></div>
            
            <div class=""prettify-tags"">python sorting</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What type of programming language is Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What type of programming language is Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Dynamic and strongly typed</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Who created Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Who created Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Guido van Rossum</p></div>
            
            <div class=""prettify-tags"">history python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>When was Python first released?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>When was Python first released?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>1991</p></div>
            
            <div class=""prettify-tags"">history python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What manages Python's development?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What manages Python's development?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Python Software Foundation</p></div>
            
            <div class=""prettify-tags"">organization python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the four major features of Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the four major features of Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li>Name Assignment</li>
<li>Functions</li>
<li>Comments</li>
<li>Docstrings</li>
</ul></div>
            
            <div class=""prettify-tags"">features python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the naming convention for variables in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the naming convention for variables in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>snake_case</p></div>
            
            <div class=""prettify-tags"">conventions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the naming convention for constants in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the naming convention for constants in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>SCREAMING_SNAKE_CASE</p></div>
            
            <div class=""prettify-tags"">conventions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What operator is used for name assignment in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What operator is used for name assignment in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>=</p></div>
            
            <div class=""prettify-tags"">python syntax</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Can a variable in Python be reassigned?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Can a variable in Python be reassigned?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Yes</p></div>
            
            <div class=""prettify-tags"">python variables</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a constant in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a constant in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Names meant to be assigned only once</p></div>
            
            <div class=""prettify-tags"">constants python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What signifies that a name should not be reassigned?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What signifies that a name should not be reassigned?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using SCREAMING_SNAKE_CASE</p></div>
            
            <div class=""prettify-tags"">conventions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does PEP stand for in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does PEP stand for in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Python Enhancement Proposal</p></div>
            
            <div class=""prettify-tags"">pep python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the significance of indentation in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the significance of indentation in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Denotes function, method, and class definitions</p></div>
            
            <div class=""prettify-tags"">python syntax</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does ALL CAPS indicate in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does ALL CAPS indicate in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It signals that the variable is intended as a constant.</p></div>
            
            <div class=""prettify-tags"">constants python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What keyword begins a function definition in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What keyword begins a function definition in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The <strong>def</strong> keyword.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the return keyword do in a function?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the return keyword do in a function?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It explicitly returns a value or object.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if a function has no explicit return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if a function has no explicit return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It implicitly returns the <strong>None</strong> object.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you call a function in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you call a function in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>By using its name followed by parentheses ()</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the error caused by inconsistent indentation?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the error caused by inconsistent indentation?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p><strong>IndentationError: unindent does not match any outer indentation level</strong></p></div>
            
            <div class=""prettify-tags"">errors python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a method in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a method in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A function bound to a class name.</p></div>
            
            <div class=""prettify-tags"">methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of print(add_two_numbers(5, 7)) if no return is used?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of print(add_two_numbers(5, 7)) if no return is used?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It outputs <strong>None</strong>.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How is the body of a function formatted in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How is the body of a function formatted in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It must be indented in a block.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>dot notation</strong> used for?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>dot notation</strong> used for?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Calling functions defined inside a class or module.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if there is a <strong>mismatch</strong> in parameters and arguments?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if there is a <strong>mismatch</strong> in parameters and arguments?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It raises a TypeError.</p></div>
            
            <div class=""prettify-tags"">errors programming</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you call the <strong>upper() method</strong> on a string?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you call the <strong>upper() method</strong> on a string?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;str.upper(start_text)&lt;/code&gt;.</p></div>
            
            <div class=""prettify-tags"">programming strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of <strong>math.pow(2, 4)</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of <strong>math.pow(2, 4)</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>16.0</p></div>
            
            <div class=""prettify-tags"">math programming</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you start a <strong>comment</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you start a <strong>comment</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use the &lt;code&gt;#&lt;/code&gt; character.</p></div>
            
            <div class=""prettify-tags"">comments programming</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>docstring</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>docstring</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A string that summarizes a function or object's purpose.</p></div>
            
            <div class=""prettify-tags"">documentation programming</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How is a <strong>multi-line docstring</strong> defined?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How is a <strong>multi-line docstring</strong> defined?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using triple double quotes ("""""").</p></div>
            
            <div class=""prettify-tags"">documentation programming</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the &lt;code&gt;.__doc__&lt;/code&gt; attribute return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the &lt;code&gt;.__doc__&lt;/code&gt; attribute return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It returns the docstring of a function, method, or class.</p></div>
            
            <div class=""prettify-tags"">attributes programming</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of <strong>PEP257</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of <strong>PEP257</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It lays out conventions for docstrings.</p></div>
            
            <div class=""prettify-tags"">programming standards</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What can docstrings function as in testing?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What can docstrings function as in testing?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Lightweight unit tests.</p></div>
            
            <div class=""prettify-tags"">programming testing</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the <strong>types of built-in numbers</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the <strong>types of built-in numbers</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li><strong>int</strong></li>
<li><strong>float</strong></li>
<li><strong>complex</strong></li>
<li><strong>fractions.Fraction</strong></li>
<li><strong>decimal.Decimal</strong></li>
</ul></div>
            
            <div class=""prettify-tags"">numbers python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>default encoding</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>default encoding</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>sys.getdefaultencoding()</p></div>
            
            <div class=""prettify-tags"">encoding python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>int</strong> type represent?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>int</strong> type represent?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Whole numbers including hexadecimal, octal, and binary.</p></div>
            
            <div class=""prettify-tags"">ints python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>float</strong> type represent?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>float</strong> type represent?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Numbers containing a decimal point.</p></div>
            
            <div class=""prettify-tags"">floats python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What operator is used for <strong>floor division</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What operator is used for <strong>floor division</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>//</p></div>
            
            <div class=""prettify-tags"">arithmetic python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>modulo operator</strong> (%) return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>modulo operator</strong> (%) return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The remainder of the division of two operands.</p></div>
            
            <div class=""prettify-tags"">arithmetic python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>6 / 2</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>6 / 2</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>3.0</p></div>
            
            <div class=""prettify-tags"">division python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>5 % 3</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>5 % 3</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>2</p></div>
            
            <div class=""prettify-tags"">modulo python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>round()</strong> function do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>round()</strong> function do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Rounds a floating point number to a specified number of decimal places.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you convert a <strong>float to an int</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you convert a <strong>float to an int</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using int()</p></div>
            
            <div class=""prettify-tags"">conversion python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What operator is used for <strong>exponentiation</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What operator is used for <strong>exponentiation</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>**</p></div>
            
            <div class=""prettify-tags"">arithmetic python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>round</strong> function do in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>round</strong> function do in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Rounds a floating point number to a specified number of decimal places or to the nearest integer if none is specified.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of <strong>round(3.1415926535, 2)</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of <strong>round(3.1415926535, 2)</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>3.14</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of <strong>round(3.1415926535)</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of <strong>round(3.1415926535)</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>3</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does Python's <strong>PEMDAS</strong> rule stand for?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does Python's <strong>PEMDAS</strong> rule stand for?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Parentheses, Exponents, Multiplication, Division, Addition, Subtraction.</p></div>
            
            <div class=""prettify-tags"">operations python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the precision of <strong>floating point numbers</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the precision of <strong>floating point numbers</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Usually implemented using double in C, with about 15 decimal places of precision.</p></div>
            
            <div class=""prettify-tags"">floating_point python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the two Boolean values in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the two Boolean values in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>True and False.</p></div>
            
            <div class=""prettify-tags"">bools python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>bool()</strong> function do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>bool()</strong> function do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Converts any object to a Boolean value, returning True unless defined to return False.</p></div>
            
            <div class=""prettify-tags"">bools python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What will <strong>bool([])</strong> return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What will <strong>bool([])</strong> return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>False</p></div>
            
            <div class=""prettify-tags"">bools python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Which operator has the highest precedence in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Which operator has the highest precedence in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The **** operator (exponentiation).</p></div>
            
            <div class=""prettify-tags"">operations python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is considered a <strong>truthy</strong> value in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is considered a <strong>truthy</strong> value in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A non-empty string, like 'is this true?'</p></div>
            
            <div class=""prettify-tags"">python truthiness</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is considered a <strong>falsy</strong> value in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is considered a <strong>falsy</strong> value in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>An empty list, like []</p></div>
            
            <div class=""prettify-tags"">falsiness python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How does the <strong>bool</strong> type relate to <strong>int</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How does the <strong>bool</strong> type relate to <strong>int</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It's a sub-type; True equals 1, False equals 0.</p></div>
            
            <div class=""prettify-tags"">booleans python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>1 == True</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>1 == True</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>True</p></div>
            
            <div class=""prettify-tags"">comparison python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>0 == False</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>0 == False</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>True</p></div>
            
            <div class=""prettify-tags"">comparison python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>1 is True</strong> return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>1 is True</strong> return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>False</p></div>
            
            <div class=""prettify-tags"">identity python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>0 is False</strong> return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>0 is False</strong> return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>False</p></div>
            
            <div class=""prettify-tags"">identity python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is considered a <strong>Python anti-pattern</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is considered a <strong>Python anti-pattern</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using '==' to compare a boolean to True or False.</p></div>
            
            <div class=""prettify-tags"">best_practices python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the preferred way to check a boolean in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the preferred way to check a boolean in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use 'if flag:' instead of 'if flag == True:'</p></div>
            
            <div class=""prettify-tags"">best_practices python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What control statements are used in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What control statements are used in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>if, elif, and else</p></div>
            
            <div class=""prettify-tags"">conditionals python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>elif</strong> statement allow?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>elif</strong> statement allow?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Multiple evaluations or branches.</p></div>
            
            <div class=""prettify-tags"">conditionals python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are <strong>truthy</strong> and <strong>falsy</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are <strong>truthy</strong> and <strong>falsy</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Objects tested for truth value; truthy is true in conditionals, falsy is false.</p></div>
            
            <div class=""prettify-tags"">boolean python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the function <strong>truthy_test</strong> print for an empty list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the function <strong>truthy_test</strong> print for an empty list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>False (because it evaluates to Falsy)</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the function <strong>truthy_test</strong> print for a non-empty list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the function <strong>truthy_test</strong> print for a non-empty list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>True because this evalutoes to true</p><p><br></p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the <strong>common operations</strong> on strings in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the <strong>common operations</strong> on strings in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Concatenation, splitting, iteration, indexing.</p></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can a <strong>str</strong> be declared in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can a <strong>str</strong> be declared in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using single ' or double "" quotes.</p></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What character is used for <strong>escaping</strong> in strings?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What character is used for <strong>escaping</strong> in strings?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Backslash \ </p></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What allows <strong>double quoting</strong> without escape characters?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What allows <strong>double quoting</strong> without escape characters?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li><strong>Single quotes</strong></li>
</ul></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What allows <strong>embedded single quoting</strong> without escape characters?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What allows <strong>embedded single quoting</strong> without escape characters?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li><strong>Double quotes</strong></li>
</ul></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How are <strong>multi-line strings</strong> declared in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How are <strong>multi-line strings</strong> declared in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li>Using <strong>'''</strong> or <strong>""""""</strong></li>
</ul></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>str(&lt;object&gt;)</strong> constructor do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>str(&lt;object&gt;)</strong> constructor do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li>Creates/coerces strings from other objects.</li>
</ul></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the behavior of <strong>str(&lt;object&gt;)</strong> compared to other data types?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the behavior of <strong>str(&lt;object&gt;)</strong> compared to other data types?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li>It does not iterate or unpack an object.</li>
</ul></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can <strong>code points</strong> within a string be referenced?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can <strong>code points</strong> within a string be referenced?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li>By <strong>0-based index</strong> number from the left.</li>
</ul></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How does indexing work from the <strong>right</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How does indexing work from the <strong>right</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li>Starts with a <strong>-1-based index</strong>.</li>
</ul></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does string <strong>slicing</strong> produce?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does string <strong>slicing</strong> produce?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li>A new string excluding the stop index.</li>
</ul></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method splits a string into <strong>substrings</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method splits a string into <strong>substrings</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li><strong>&lt;str&gt;.split(&lt;separator&gt;)</strong></li>
</ul></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>&lt;str&gt;.split()</strong> do without arguments?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>&lt;str&gt;.split()</strong> do without arguments?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li>Splits the string on <strong>whitespace</strong>.</li>
</ul></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can strings be <strong>concatenated</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can strings be <strong>concatenated</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li>Using the <strong>+ operator</strong>.</li>
</ul></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What operator is used for string concatenation in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What operator is used for string concatenation in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The <strong>+</strong> operator</p></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Which method is preferred for combining strings from a collection?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Which method is preferred for combining strings from a collection?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use <strong>str.join(iterable)</strong></p></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of <strong>' '.join(['hen', 'egg', 'rooster'])</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of <strong>' '.join(['hen', 'egg', 'rooster'])</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p><strong>'hen egg rooster'</strong></p></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>enumerate()</strong> function do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>enumerate()</strong> function do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It provides both the index and value of each element in a loop.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are some operations Python string methods assist with?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are some operations Python string methods assist with?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Searching, cleaning, splitting, transforming, and translating.</p></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What modules assist with string formatting in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What modules assist with string formatting in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p><strong>re</strong>, <strong>difflib</strong>, and <strong>textwrap</strong></p></div>
            
            <div class=""prettify-tags"">modules python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the binary sequence type in Python corresponding to str?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the binary sequence type in Python corresponding to str?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p><strong>bytes</strong>, <strong>bytearray</strong>, and <strong>memoryview</strong></p></div>
            
            <div class=""prettify-tags"">binary python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>print()</strong> function output for an empty string?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>print()</strong> function output for an empty string?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It outputs nothing, but can iterate over code points.</p></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a better option than concatenation for performance?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a better option than concatenation for performance?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using <strong>str.join()</strong> method.</p></div>
            
            <div class=""prettify-tags"">performance python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the <strong>modules</strong> for string formatting in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the <strong>modules</strong> for string formatting in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li><strong>re</strong> (regular expressions)</li>
<li><strong>difflib</strong> (sequence comparison)</li>
<li><strong>textwrap</strong></li>
</ul></div>
            
            <div class=""prettify-tags"">modules python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the <strong>binary sequence types</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the <strong>binary sequence types</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li><strong>bytes</strong> (binary sequence)</li>
<li><strong>bytearray</strong></li>
<li><strong>memoryview</strong></li>
</ul></div>
            
            <div class=""prettify-tags"">binary python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does a <strong>comparison operator</strong> do in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does a <strong>comparison operator</strong> do in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Compares two operands and returns <strong>True</strong> or <strong>False</strong>.</p></div>
            
            <div class=""prettify-tags"">comparison python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>greater than</strong> operator (&gt;) do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>greater than</strong> operator (&gt;) do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Returns <strong>True</strong> if the left operand is strictly greater than the right.</p></div>
            
            <div class=""prettify-tags"">operators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>less than</strong> operator (&lt;) do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>less than</strong> operator (&lt;) do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Returns <strong>True</strong> if the left operand is strictly less than the right.</p></div>
            
            <div class=""prettify-tags"">operators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>equal to</strong> operator (==) check?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>equal to</strong> operator (==) check?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Returns <strong>True</strong> if both operands are strictly equal in value.</p></div>
            
            <div class=""prettify-tags"">operators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>greater than or equal to</strong> operator (&gt;=) do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>greater than or equal to</strong> operator (&gt;=) do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Returns <strong>True</strong> if the left operand is greater than or equal to the right.</p></div>
            
            <div class=""prettify-tags"">operators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>not equal to</strong> operator (!=) check?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>not equal to</strong> operator (!=) check?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Returns <strong>True</strong> if both operands are not equal.</p></div>
            
            <div class=""prettify-tags"">operators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>identity</strong> operator (is) check?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>identity</strong> operator (is) check?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Returns <strong>True</strong> if both operands refer to the same object.</p></div>
            
            <div class=""prettify-tags"">operators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>containment test</strong> operator (in) do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>containment test</strong> operator (in) do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Returns <strong>True</strong> if the left operand is a member of the right operand.</p></div>
            
            <div class=""prettify-tags"">operators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Do different data types compare equal by default in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Do different data types compare equal by default in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>No, different types (except numeric) do not compare equal by default.</p></div>
            
            <div class=""prettify-tags"">comparison python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Can an integer and a float be considered equal?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Can an integer and a float be considered equal?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Yes, they can be considered equal if they can be implicitly converted.</p></div>
            
            <div class=""prettify-tags"">numeric python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if comparison operators are used on incompatible types?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if comparison operators are used on incompatible types?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A <strong>TypeError</strong> is thrown if the objects cannot be accurately compared.</p></div>
            
            <div class=""prettify-tags"">error python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Can a <strong>string</strong> be converted to an <strong>int</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Can a <strong>string</strong> be converted to an <strong>int</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>No, a string cannot be converted to an int directly.</p></div>
            
            <div class=""prettify-tags"">data_types python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Is <strong>17</strong> equal to <strong>17.0</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Is <strong>17</strong> equal to <strong>17.0</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Yes, 17 is equal to 17.0.</p></div>
            
            <div class=""prettify-tags"">comparison python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>6/3 == 0b10</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>6/3 == 0b10</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>True, 6/3 equals 2, which is 0b10 in binary.</p></div>
            
            <div class=""prettify-tags"">binary python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Can an <strong>int</strong> be converted to a <strong>complex</strong> number?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Can an <strong>int</strong> be converted to a <strong>complex</strong> number?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Yes, an int can be converted to a complex number with a 0 imaginary part.</p></div>
            
            <div class=""prettify-tags"">complex_numbers python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>NaN</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>NaN</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>NaN stands for 'not a number' and is a special floating-point value.</p></div>
            
            <div class=""prettify-tags"">nan python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Is <strong>x == x</strong> true when <strong>x</strong> is NaN?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Is <strong>x == x</strong> true when <strong>x</strong> is NaN?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>No, x == x is False when x is NaN.</p></div>
            
            <div class=""prettify-tags"">nan python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How are <strong>strings</strong> compared in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How are <strong>strings</strong> compared in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Strings are compared lexicographically using Unicode code points.</p></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the comparison of <strong>'Python'</strong> and <strong>'Rust'</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the comparison of <strong>'Python'</strong> and <strong>'Rust'</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>False, 'Python' is not greater than 'Rust'.</p></div>
            
            <div class=""prettify-tags"">comparison python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>ord()</strong> function do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>ord()</strong> function do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>ord() returns the Unicode code point of a character.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Are <strong>lists</strong> compared lexicographically?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Are <strong>lists</strong> compared lexicographically?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Yes, lists are compared lexicographically based on their elements.</p></div>
            
            <div class=""prettify-tags"">lists python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>comparison chaining</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>comparison chaining</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Comparison chaining allows multiple comparisons in a single expression.</p></div>
            
            <div class=""prettify-tags"">comparison python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>is</strong> operator check?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>is</strong> operator check?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The is operator checks for object identity, not value equality.</p></div>
            
            <div class=""prettify-tags"">identity python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a str in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a str in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>An immutable sequence of Unicode code points.</p></div>
            
            <div class=""prettify-tags"">python strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can strings be concatenated in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can strings be concatenated in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>With &lt;code&gt;+&lt;/code&gt; or via &lt;code&gt;&lt;str&gt;.join(&lt;iterable&gt;)&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">methods strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What methods check for prefixes and suffixes?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What methods check for prefixes and suffixes?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;startswith(&lt;substr&gt;)&lt;/code&gt; and &lt;code&gt;endswith(&lt;substr&gt;)&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">methods strings</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of rich comparison methods?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of rich comparison methods?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>To customize comparison behavior for objects.</p></div>
            
            <div class=""prettify-tags"">comparison python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method checks if a string <strong>starts with</strong> a substring?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method checks if a string <strong>starts with</strong> a substring?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;&lt;str&gt;.startswith(&lt;substr&gt;)&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">methods string</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method checks if a string <strong>ends with</strong> a substring?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method checks if a string <strong>ends with</strong> a substring?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;&lt;str&gt;.endswith(&lt;substr&gt;)&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">methods string</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method <strong>capitalizes</strong> the first character of each word in a string?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method <strong>capitalizes</strong> the first character of each word in a string?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;&lt;str&gt;.title()&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">methods string</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What methods can be used to <strong>alter string casing</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What methods can be used to <strong>alter string casing</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li>&lt;code&gt;&lt;str&gt;.upper()&lt;/code&gt;</li>
<li>&lt;code&gt;&lt;str&gt;.lower()&lt;/code&gt;</li>
<li>&lt;code&gt;&lt;str&gt;.swapcase()&lt;/code&gt;</li>
</ul></div>
            
            <div class=""prettify-tags"">methods string</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method <strong>removes leading/trailing characters</strong> from a string?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method <strong>removes leading/trailing characters</strong> from a string?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;&lt;str&gt;.strip(&lt;chars&gt;)&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">methods string</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method removes <strong>only leading characters</strong> from a string?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method removes <strong>only leading characters</strong> from a string?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;&lt;str&gt;.lstrip(&lt;chars&gt;)&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">methods string</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method removes <strong>only trailing characters</strong> from a string?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method removes <strong>only trailing characters</strong> from a string?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;&lt;str&gt;.rstrip(&lt;chars&gt;)&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">methods string</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method <strong>replaces substrings</strong> in a string?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method <strong>replaces substrings</strong> in a string?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;&lt;str&gt;.replace(&lt;old&gt;, &lt;new&gt;)&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">methods string</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the return value of &lt;code&gt;'&lt;string&gt;'.endswith(&lt;suffix&gt;)&lt;/code&gt; if the string does not end with the suffix?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the return value of &lt;code&gt;'&lt;string&gt;'.endswith(&lt;suffix&gt;)&lt;/code&gt; if the string does not end with the suffix?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;False&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">methods string</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;'&lt;string&gt;'.strip()&lt;/code&gt; do if no characters are specified?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;'&lt;string&gt;'.strip()&lt;/code&gt; do if no characters are specified?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Removes all leading and trailing whitespace.</p></div>
            
            <div class=""prettify-tags"">methods string</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the effect of &lt;code&gt;'&lt;string&gt;'.strip(&lt;chars&gt;)&lt;/code&gt;?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the effect of &lt;code&gt;'&lt;string&gt;'.strip(&lt;chars&gt;)&lt;/code&gt;?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Removes specified leading and trailing characters.</p></div>
            
            <div class=""prettify-tags"">methods string</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when a string method appears to modify a string?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when a string method appears to modify a string?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It returns a new copy of the string; the original remains unchanged.</p></div>
            
            <div class=""prettify-tags"">immutable string</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>new method</strong> introduced in Python 3.9 for removing prefixes?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>new method</strong> introduced in Python 3.9 for removing prefixes?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;str.removeprefix(&lt;substring&gt;)&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">python string_methods</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;str.removeprefix(&lt;substring&gt;)&lt;/code&gt; return if the substring isn't present?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;str.removeprefix(&lt;substring&gt;)&lt;/code&gt; return if the substring isn't present?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A copy of the original string</p></div>
            
            <div class=""prettify-tags"">python string_methods</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>new method</strong> introduced in Python 3.9 for removing suffixes?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>new method</strong> introduced in Python 3.9 for removing suffixes?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;str.removesuffix(&lt;substring&gt;)&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">python string_methods</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;str.removesuffix(&lt;substring&gt;)&lt;/code&gt; return if the substring isn't present?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;str.removesuffix(&lt;substring&gt;)&lt;/code&gt; return if the substring isn't present?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A copy of the original string</p></div>
            
            <div class=""prettify-tags"">python string_methods</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you access elements in a <strong>Python list</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you access elements in a <strong>Python list</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Via 0-based index number</p></div>
            
            <div class=""prettify-tags"">lists python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>list</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>list</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A mutable collection of items in sequence</p></div>
            
            <div class=""prettify-tags"">lists python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method adds an item to the <strong>right-hand side</strong> of a list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method adds an item to the <strong>right-hand side</strong> of a list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;.append()&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">lists python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the performance of appending or popping from both sides of a <strong>deque</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the performance of appending or popping from both sides of a <strong>deque</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Approximately O(1) performance</p></div>
            
            <div class=""prettify-tags"">collections python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>function</strong> to find the maximum value in a list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>function</strong> to find the maximum value in a list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;max()&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">lists python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can you copy a list in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can you copy a list in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using &lt;code&gt;&lt;list&gt;.copy()&lt;/code&gt; or slice notation</p></div>
            
            <div class=""prettify-tags"">lists python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the performance of lists in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the performance of lists in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>O(1) performance in either direction</p></div>
            
            <div class=""prettify-tags"">lists performance</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are lists in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are lists in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Mutable data structures that can contain references to arbitrary objects</p></div>
            
            <div class=""prettify-tags"">data_structures lists</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can a list be declared in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can a list be declared in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using square brackets [] and commas between elements</p></div>
            
            <div class=""prettify-tags"">lists syntax</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of 'no_elements = []'?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of 'no_elements = []'?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>[]</p></div>
            
            <div class=""prettify-tags"">lists output</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How to create a list from a tuple?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How to create a list from a tuple?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use list() constructor with the tuple as an argument</p></div>
            
            <div class=""prettify-tags"">constructor lists</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you use list() with a string?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you use list() with a string?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It creates a list of individual characters</p></div>
            
            <div class=""prettify-tags"">lists string</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does list() do with a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does list() do with a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It inserts only the keys into the list</p></div>
            
            <div class=""prettify-tags"">dictionary lists</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What will happen if you pass a non-iterable to list()?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What will happen if you pass a non-iterable to list()?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It will raise a TypeError</p></div>
            
            <div class=""prettify-tags"">error lists</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is an example of creating a list with multiple elements from a set?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is an example of creating a list with multiple elements from a set?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>list({2, 3, 5, 7, 11}) creates [2, 3, 5, 7, 11]</p></div>
            
            <div class=""prettify-tags"">lists set</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can you format a list for readability?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can you format a list for readability?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use line breaks for many elements or nested structures</p></div>
            
            <div class=""prettify-tags"">formatting lists</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you create a <strong>one-item list</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you create a <strong>one-item list</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use the literal method: &lt;code&gt;one_element = [16]&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">lists python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Why does &lt;code&gt;list(16)&lt;/code&gt; fail?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Why does &lt;code&gt;list(16)&lt;/code&gt; fail?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Numbers are <strong>not iterable</strong>.</p></div>
            
            <div class=""prettify-tags"">error python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you create a list from a <strong>one-element tuple</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you create a list from a <strong>one-element tuple</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;one_element_from_iterable = list((16,))&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you access list elements?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you access list elements?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use bracket notation: &lt;code&gt;list[index]&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">lists python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you access a <strong>section of a list</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you access a <strong>section of a list</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use slice notation: &lt;code&gt;list[start:stop]&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">python slicing</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does slicing a list return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does slicing a list return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A <strong>copy</strong> of the sliced items.</p></div>
            
            <div class=""prettify-tags"">python slicing</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you use a <strong>step parameter</strong> in slicing?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you use a <strong>step parameter</strong> in slicing?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;list[start:stop:step]&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">python slicing</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you loop through a list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you loop through a list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;for item in list:&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">loops python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you print list items with their <strong>indexes</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you print list items with their <strong>indexes</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;enumerate(list)&lt;/code&gt; in the loop.</p></div>
            
            <div class=""prettify-tags"">loops python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you append items to a list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you append items to a list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;list.append(item)&lt;/code&gt; within a loop.</p></div>
            
            <div class=""prettify-tags"">lists python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you concatenate two lists?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you concatenate two lists?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use the &lt;code&gt;+&lt;/code&gt; operator: &lt;code&gt;list1 + list2&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">lists python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does using &lt;code&gt;*&lt;/code&gt; with a list do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does using &lt;code&gt;*&lt;/code&gt; with a list do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Repeats the list &lt;code&gt;n&lt;/code&gt; times: &lt;code&gt;list * n&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">lists python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you combine two lists using slice assignment?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you combine two lists using slice assignment?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>first_one[0:0] = second_one</p></div>
            
            <div class=""prettify-tags"">lists python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does 'second_one.append(item)' do in a loop?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does 'second_one.append(item)' do in a loop?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Appends items from first_one to second_one</p></div>
            
            <div class=""prettify-tags"">loops python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you assign a list to a new variable?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you assign a list to a new variable?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It does not create a copy; changes affect both variables</p></div>
            
            <div class=""prettify-tags"">python variables</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can you avoid referencing issues with lists?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can you avoid referencing issues with lists?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use list.copy() or slicing to create a shallow copy</p></div>
            
            <div class=""prettify-tags"">copying python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does 'actual_names.copy()' do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does 'actual_names.copy()' do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Creates a new list object that can be changed independently</p></div>
            
            <div class=""prettify-tags"">copying python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>result</strong> of changing an element in the shallow copy?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>result</strong> of changing an element in the shallow copy?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It changes the corresponding element in the original grid.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>deque</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>deque</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A list variant optimized for fast appends and pops.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are <strong>nested lists</strong> used for?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are <strong>nested lists</strong> used for?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>To model small matrices.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Which libraries are mentioned for efficient <strong>matrix manipulation</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>Which libraries are mentioned for efficient <strong>matrix manipulation</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Numpy and Pandas.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the method to <strong>add an item</strong> to the end of a list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the method to <strong>add an item</strong> to the end of a list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;&lt;list&gt;.append(&lt;item&gt;)&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">lists methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;list&gt;.insert(&lt;index&gt;, &lt;item&gt;)&lt;/code&gt; do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;list&gt;.insert(&lt;index&gt;, &lt;item&gt;)&lt;/code&gt; do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Inserts &lt;code&gt;&lt;item&gt;&lt;/code&gt; at a specific &lt;code&gt;&lt;index&gt;&lt;/code&gt; in the list.</p></div>
            
            <div class=""prettify-tags"">lists methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if &lt;code&gt;&lt;index&gt;&lt;/code&gt; is 0 in &lt;code&gt;&lt;list&gt;.insert(&lt;index&gt;, &lt;item&gt;)&lt;/code&gt;?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if &lt;code&gt;&lt;index&gt;&lt;/code&gt; is 0 in &lt;code&gt;&lt;list&gt;.insert(&lt;index&gt;, &lt;item&gt;)&lt;/code&gt;?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The item is added to the <strong>start</strong> of the list.</p></div>
            
            <div class=""prettify-tags"">lists methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>combine</strong> an iterable with a list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>combine</strong> an iterable with a list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;&lt;list&gt;.extend(&lt;iterable&gt;)&lt;/code&gt; to concatenate.</p></div>
            
            <div class=""prettify-tags"">lists methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;list&gt;.remove(&lt;item&gt;)&lt;/code&gt; do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;list&gt;.remove(&lt;item&gt;)&lt;/code&gt; do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Removes &lt;code&gt;&lt;item&gt;&lt;/code&gt; from the list; raises ValueError if not found.</p></div>
            
            <div class=""prettify-tags"">lists methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;list&gt;.pop(&lt;index&gt;)&lt;/code&gt; do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;list&gt;.pop(&lt;index&gt;)&lt;/code&gt; do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Removes and returns the element at &lt;code&gt;&lt;index&gt;&lt;/code&gt;.</p></div>
            
            <div class=""prettify-tags"">lists methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the default behavior of &lt;code&gt;&lt;list&gt;.pop()&lt;/code&gt;?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the default behavior of &lt;code&gt;&lt;list&gt;.pop()&lt;/code&gt;?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Removes and returns the <strong>last</strong> element of the list.</p></div>
            
            <div class=""prettify-tags"">lists methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method removes all items from a list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method removes all items from a list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;&lt;list&gt;.clear()&lt;/code&gt;.</p></div>
            
            <div class=""prettify-tags"">lists methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>reverse</strong> the order of elements in a list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>reverse</strong> the order of elements in a list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;&lt;list&gt;.reverse()&lt;/code&gt; to mutate the list in place.</p></div>
            
            <div class=""prettify-tags"">lists methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;list&gt;.sort()&lt;/code&gt; do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;list&gt;.sort()&lt;/code&gt; do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Sorts the list in <strong>ascending</strong> order by default.</p></div>
            
            <div class=""prettify-tags"">lists methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What sorting algorithm did Python use from 2002 to 2022?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What sorting algorithm did Python use from 2002 to 2022?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Python used <strong>Timsort</strong>.</p></div>
            
            <div class=""prettify-tags"">lists methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What error is raised when trying to remove a non-existent item with &lt;code&gt;&lt;list&gt;.remove(&lt;item&gt;)&lt;/code&gt;?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What error is raised when trying to remove a non-existent item with &lt;code&gt;&lt;list&gt;.remove(&lt;item&gt;)&lt;/code&gt;?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Raises <strong>ValueError</strong>.</p></div>
            
            <div class=""prettify-tags"">lists methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What error does &lt;code&gt;&lt;list&gt;.pop(&lt;index&gt;)&lt;/code&gt; raise if the index is out of range?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What error does &lt;code&gt;&lt;list&gt;.pop(&lt;index&gt;)&lt;/code&gt; raise if the index is out of range?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Raises <strong>IndexError</strong>.</p></div>
            
            <div class=""prettify-tags"">lists methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What algorithm did Python use from 2002 to 2022 for sorting?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What algorithm did Python use from 2002 to 2022 for sorting?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Timsort</p></div>
            
            <div class=""prettify-tags"">algorithms python sorting</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you sort a list in descending order?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you sort a list in descending order?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Pass the argument reverse=True to &lt;list&gt;.sort()</p></div>
            
            <div class=""prettify-tags"">python sorting</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What function returns a sorted copy of a list without modifying the original?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What function returns a sorted copy of a list without modifying the original?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>sorted(&lt;list&gt;)</p></div>
            
            <div class=""prettify-tags"">python sorting</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method counts the occurrences of an item in a list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What method counts the occurrences of an item in a list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;list&gt;.count(&lt;item&gt;)</p></div>
            
            <div class=""prettify-tags"">list python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you find the index of the first occurrence of an item in a list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How do you find the index of the first occurrence of an item in a list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;list&gt;.index(&lt;item&gt;)</p></div>
            
            <div class=""prettify-tags"">list python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What error is raised if an item is not found using &lt;list&gt;.index(&lt;item&gt;)?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What error is raised if an item is not found using &lt;list&gt;.index(&lt;item&gt;)?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>ValueError</p></div>
            
            <div class=""prettify-tags"">list python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can you check if an item is in a list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can you check if an item is in a list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use the in operator: &lt;item&gt; in &lt;list&gt;</p></div>
            
            <div class=""prettify-tags"">list python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;list&gt;.copy() do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;list&gt;.copy() do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Creates a shallow copy of the list</p></div>
            
            <div class=""prettify-tags"">copy python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What should be used to create a deep copy of a list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What should be used to create a deep copy of a list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>copy.deepcopy()</p></div>
            
            <div class=""prettify-tags"">copy python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a shallow copy?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a shallow copy?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A copy that does not create new objects for referenced elements</p></div>
            
            <div class=""prettify-tags"">copy python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the default sort order of the list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the default sort order of the list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Ascending</p></div>
            
            <div class=""prettify-tags"">python sorting</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>deep copy</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>deep copy</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A complete copy of all references and objects, not just the references themselves.</p></div>
            
            <div class=""prettify-tags"">copying python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the two <strong>looping constructs</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the two <strong>looping constructs</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li><strong>while</strong> loops</li>
<li><strong>for</strong> loops</li>
</ul></div>
            
            <div class=""prettify-tags"">loops python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does a <strong>while loop</strong> do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does a <strong>while loop</strong> do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Executes as long as the loop expression evaluates to True.</p></div>
            
            <div class=""prettify-tags"">loops python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is considered <strong>truthy</strong> in a boolean context?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is considered <strong>truthy</strong> in a boolean context?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Lists with one or more values are truthy; empty lists are falsy.</p></div>
            
            <div class=""prettify-tags"">boolean python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How does a <strong>for loop</strong> function in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How does a <strong>for loop</strong> function in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Cycles through values of any iterable object until StopIteration is raised.</p></div>
            
            <div class=""prettify-tags"">loops python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>range()</strong> function used for?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>range()</strong> function used for?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Creates a sequence of numbers for use as a loop counter.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the parameters of <strong>range()</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What are the parameters of <strong>range()</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li><strong>stop</strong> (required)</li>
<li><strong>start</strong> (optional)</li>
<li><strong>step</strong> (optional)</li>
</ul></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>next()</strong> function do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>next()</strong> function do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Returns the next value from an iterator, raises StopIteration when exhausted.</p></div>
            
            <div class=""prettify-tags"">iterators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of this code snippet? &lt;code&gt;for number in range(1, 7):&lt;/code&gt;</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of this code snippet? &lt;code&gt;for number in range(1, 7):&lt;/code&gt;</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Prints whether each number from 1 to 6 is odd or even.</p></div>
            
            <div class=""prettify-tags"">loops python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>step</strong> parameter in range() control?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>step</strong> parameter in range() control?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Determines the increment between each number in the range.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;enumerate(&lt;iterable&gt;)&lt;/code&gt; return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;enumerate(&lt;iterable&gt;)&lt;/code&gt; return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>An iterator over (index, value) pairs.</p></div>
            
            <div class=""prettify-tags"">enumerate python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can you alter the starting index in &lt;code&gt;enumerate&lt;/code&gt;?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>How can you alter the starting index in &lt;code&gt;enumerate&lt;/code&gt;?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;enumerate(&lt;iterable&gt;, start=n)&lt;/code&gt; to start counting at n.</p></div>
            
            <div class=""prettify-tags"">enumerate python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the &lt;code&gt;continue&lt;/code&gt; keyword do in a loop?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the &lt;code&gt;continue&lt;/code&gt; keyword do in a loop?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It skips to the next iteration of the loop.</p></div>
            
            <div class=""prettify-tags"">control_flow python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the &lt;code&gt;break&lt;/code&gt; keyword do in a loop?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the &lt;code&gt;break&lt;/code&gt; keyword do in a loop?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It stops the iteration and exits the loop.</p></div>
            
            <div class=""prettify-tags"">control_flow python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is unique about the loop &lt;code&gt;else&lt;/code&gt; clause in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is unique about the loop &lt;code&gt;else&lt;/code&gt; clause in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It executes after the loop finishes unless the loop is terminated by &lt;code&gt;break&lt;/code&gt;.</p></div>
            
            <div class=""prettify-tags"">loops python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of the loop when it encounters 'sliver'?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of the loop when it encounters 'sliver'?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The loop stops and prints 'loop broken.'</p></div>
            
            <div class=""prettify-tags"">control_flow python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>enumerate</strong> function do in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>enumerate</strong> function do in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It provides both the index and the value of items in an iterable.</p></div>
            
            <div class=""prettify-tags"">enumerate python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when a <strong>break</strong> statement is executed in a loop?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when a <strong>break</strong> statement is executed in a loop?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It terminates the loop immediately, skipping the else clause.</p></div>
            
            <div class=""prettify-tags"">loops python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is printed when a word starts with <strong>'S'</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is printed when a word starts with <strong>'S'</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>'Found an S, stopping iteration.'</p></div>
            
            <div class=""prettify-tags"">output python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>else</strong> clause in a loop do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>else</strong> clause in a loop do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It executes after the loop finishes unless interrupted by a break.</p></div>
            
            <div class=""prettify-tags"">loops python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output when the loop completes without a break?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 1</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output when the loop completes without a break?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>'Found the above b-words, out of 6 words in the word list.'</p></div>
            
            <div class=""prettify-tags"">output python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>tuple</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>tuple</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>An immutable collection of items in sequence.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you <strong>iterate</strong> over a tuple?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you <strong>iterate</strong> over a tuple?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using the &lt;code&gt;for item in &lt;tuple&gt;&lt;/code&gt; construct.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you access elements in a tuple?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you access elements in a tuple?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using bracket notation with a 0-based or -1-based index.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the memory usage of tuples compared to other collections?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the memory usage of tuples compared to other collections?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Tuples take up very little memory space.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the access time complexity for tuples?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the access time complexity for tuples?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Constant time O(1) when using an index.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>Can tuples be resized or altered?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>Can tuples be resized or altered?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>No, they are immutable and cannot be resized or altered.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you create a tuple using the <strong>tuple</strong> constructor?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you create a tuple using the <strong>tuple</strong> constructor?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using &lt;code&gt;tuple()&lt;/code&gt; with an iterable or empty.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you pass a string to the <strong>tuple()</strong> constructor?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you pass a string to the <strong>tuple()</strong> constructor?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It iterates through the characters and adds them to the tuple.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you create a <strong>one-tuple</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you create a <strong>one-tuple</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use a comma: &lt;code&gt;('element',)&lt;/code&gt;.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you convert a <strong>dictionary</strong> to a tuple?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you convert a <strong>dictionary</strong> to a tuple?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;dict.items()&lt;/code&gt; to get (key, value) pairs.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the syntax to declare a tuple literal?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the syntax to declare a tuple literal?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using parentheses: &lt;code&gt;('element1', 'element2')&lt;/code&gt; or just commas.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is required to create an <strong>empty tuple</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is required to create an <strong>empty tuple</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;()&lt;/code&gt; or &lt;code&gt;tuple()&lt;/code&gt;.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>tuple</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>tuple</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>An ordered, immutable collection of elements, which can be of heterogeneous data types.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you <strong>concatenate tuples</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you <strong>concatenate tuples</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using the &lt;code&gt;+&lt;/code&gt; operator to combine them into a new tuple.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>&lt;code&gt;*&lt;/code&gt; operator</strong> do with tuples?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>&lt;code&gt;*&lt;/code&gt; operator</strong> do with tuples?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It repeats the tuple elements, creating a new tuple.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you <strong>access elements</strong> in a tuple?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you <strong>access elements</strong> in a tuple?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using bracket notation with indexes (e.g., &lt;code&gt;tuple[index]&lt;/code&gt;).</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What method can be used to <strong>copy a tuple</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What method can be used to <strong>copy a tuple</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using &lt;code&gt;tuple.copy()&lt;/code&gt; or slice notation (e.g., &lt;code&gt;tuple[:]&lt;/code&gt;).</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you <strong>iterate over a tuple</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you <strong>iterate over a tuple</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using a &lt;code&gt;for&lt;/code&gt; loop, e.g., &lt;code&gt;for item in tuple:&lt;/code&gt;.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>namedtuple</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>namedtuple</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A subclass of tuples that allows access to elements by name instead of index.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>Can tuples contain <strong>mutable types</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>Can tuples contain <strong>mutable types</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Yes, but if they do, the tuple becomes un-hashable.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>hashability</strong> of tuples?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>hashability</strong> of tuples?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Tuples are hashable if they contain only immutable elements.</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is an example of a <strong>tuple</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is an example of a <strong>tuple</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;student_info = ('Alyssa', 'grade 3', 'female', 8)&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">python tuples</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>dictionary</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>dictionary</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A data structure that associates hashable keys to values, known as a resizable hash table or hashmap.</p></div>
            
            <div class=""prettify-tags"">data_structure python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What types can <strong>keys</strong> in a dictionary be?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What types can <strong>keys</strong> in a dictionary be?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Numbers, strings, or tuples (of immutable values).</p></div>
            
            <div class=""prettify-tags"">keys python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What types can <strong>values</strong> in a dictionary be?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What types can <strong>values</strong> in a dictionary be?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Any data type or structure, including nested structures like lists or other dictionaries.</p></div>
            
            <div class=""prettify-tags"">python values</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the average time complexity for retrieving a value from a <strong>dictionary</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the average time complexity for retrieving a value from a <strong>dictionary</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Constant time, independent of the number of entries.</p></div>
            
            <div class=""prettify-tags"">python time_complexity</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can dictionaries be created?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can dictionaries be created?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using the constructor, dictionary literals, fromkeys(), comprehensions, or merging.</p></div>
            
            <div class=""prettify-tags"">creation python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the syntax for creating a <strong>dictionary literal</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the syntax for creating a <strong>dictionary literal</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using curly brackets &lt;code&gt;{}&lt;/code&gt; with key : value pairs.</p></div>
            
            <div class=""prettify-tags"">python syntax</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you merge two dictionaries in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you merge two dictionaries in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using unpacking (&lt;code&gt;**&lt;/code&gt;), the &lt;code&gt;|&lt;/code&gt; operator, or loops.</p></div>
            
            <div class=""prettify-tags"">merging python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>nested dictionary</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>nested dictionary</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A dictionary that contains other dictionaries as values.</p></div>
            
            <div class=""prettify-tags"">nested python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>constructor</strong> for the dict class?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>constructor</strong> for the dict class?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;dict()&lt;/code&gt; can create dictionaries from key-value pairs.</p></div>
            
            <div class=""prettify-tags"">constructor python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the significance of <strong>hashable keys</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the significance of <strong>hashable keys</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Keys must be unique and immutable to ensure consistent access in a dictionary.</p></div>
            
            <div class=""prettify-tags"">hashable python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>dictionary</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>dictionary</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A collection of key-value pairs.</p></div>
            
            <div class=""prettify-tags"">data_structures python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you <strong>access a value</strong> in a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you <strong>access a value</strong> in a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using a key in square brackets.</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if a key does not exist when accessing a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if a key does not exist when accessing a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A KeyError is thrown.</p></div>
            
            <div class=""prettify-tags"">errors python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you avoid a <strong>KeyError</strong> when accessing a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you avoid a <strong>KeyError</strong> when accessing a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use the .get(&lt;key&gt;, &lt;default value&gt;) method.</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you access a <strong>nested dictionary</strong> value?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you access a <strong>nested dictionary</strong> value?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use successive brackets for each key.</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the method <strong>.pop(&lt;key&gt;)</strong> do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the method <strong>.pop(&lt;key&gt;)</strong> do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Deletes a key-value pair and returns the value.</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you <strong>change an entry</strong> in a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you <strong>change an entry</strong> in a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Assign a new value to its key.</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you <strong>remove an entry</strong> from a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you <strong>remove an entry</strong> from a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use .pop(&lt;key&gt;) or the del statement.</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>get()</strong> method return if the key is not found?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>get()</strong> method return if the key is not found?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The default value specified.</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you <strong>add a new key-value pair</strong> to a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you <strong>add a new key-value pair</strong> to a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Assign a value to a new key.</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is an example of a <strong>nested dictionary</strong> in the provided code?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is an example of a <strong>nested dictionary</strong> in the provided code?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The 'animals' dictionary with 'Real' and 'Imaginary' categories.</p></div>
            
            <div class=""prettify-tags"">data_structures python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you <strong>iterate</strong> over a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you <strong>iterate</strong> over a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use `for item in dict` or `while item`</p></div>
            
            <div class=""prettify-tags"">dictionary iteration</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>.items()</strong> method return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>.items()</strong> method return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Returns <strong>(key, value)</strong> tuples</p></div>
            
            <div class=""prettify-tags"">dictionary methods</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>.keys()</strong> method return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>.keys()</strong> method return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Returns the <strong>keys</strong> of the dictionary</p></div>
            
            <div class=""prettify-tags"">dictionary methods</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>.values()</strong> method return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>.values()</strong> method return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Returns the <strong>values</strong> of the dictionary</p></div>
            
            <div class=""prettify-tags"">dictionary methods</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>Counter</strong> class do in the collections module?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>Counter</strong> class do in the collections module?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Automatically counts items and returns them in a dict</p></div>
            
            <div class=""prettify-tags"">collections counter</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of <strong>OrderedDict</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of <strong>OrderedDict</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Specialized for arranging the <strong>order</strong> of dictionary entries</p></div>
            
            <div class=""prettify-tags"">collections ordereddict</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>defaultdict</strong> do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>defaultdict</strong> do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Sets a <strong>default value</strong> if a key is not found</p></div>
            
            <div class=""prettify-tags"">collections defaultdict</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>dict.setdefault()</strong> do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>dict.setdefault()</strong> do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Adds keys without throwing a <strong>KeyError</strong></p></div>
            
            <div class=""prettify-tags"">dictionary methods</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>dict.fromkeys()</strong> do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>dict.fromkeys()</strong> do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Creates a new dict from iterables with a default value</p></div>
            
            <div class=""prettify-tags"">dictionary methods</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>dict.update()</strong> do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>dict.update()</strong> do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Updates one dict with overlapping values from another</p></div>
            
            <div class=""prettify-tags"">dictionary methods</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>dict.popitem()</strong> do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>dict.popitem()</strong> do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Removes and returns a <strong>key, value</strong> pair</p></div>
            
            <div class=""prettify-tags"">dictionary methods</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>setdefault(key, default value)</strong> do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>setdefault(key, default value)</strong> do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Returns value if key exists; inserts (key, default value) if not and returns the default value.</p></div>
            
            <div class=""prettify-tags"">dictionary python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>populate a dictionary</strong> from an iterable?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>populate a dictionary</strong> from an iterable?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;dict.fromkeys(iterable, default value)&lt;/code&gt; to create a new dict with keys from iterable and default values.</p></div>
            
            <div class=""prettify-tags"">dictionary python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>popitem()</strong> do in a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>popitem()</strong> do in a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Removes and returns a (key, value) pair in Last-in-First-out (LIFO) order.</p></div>
            
            <div class=""prettify-tags"">dictionary python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What do <strong>.keys(), .values(), .items()</strong> return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What do <strong>.keys(), .values(), .items()</strong> return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li><strong>.keys()</strong>: iterable of keys</li>
<li><strong>.values()</strong>: iterable of values</li>
<li><strong>.items()</strong>: iterable of (key, value) pairs</li>
</ul></div>
            
            <div class=""prettify-tags"">dictionary python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if <strong>popitem()</strong> is called on an empty dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if <strong>popitem()</strong> is called on an empty dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Raises a KeyError: 'popitem(): dictionary is empty'.</p></div>
            
            <div class=""prettify-tags"">dictionary python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How does the <strong>view</strong> of a dictionary work?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How does the <strong>view</strong> of a dictionary work?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Views are dynamic; changes in the dictionary reflect in the views returned by .keys(), .values(), and .items().</p></div>
            
            <div class=""prettify-tags"">dictionary python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What method combines two dictionaries in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What method combines two dictionaries in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>.update()</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does .keys() return in a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does .keys() return in a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The keys of the dictionary</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does .values() return in a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does .values() return in a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The values of the dictionary</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does .items() return in a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does .items() return in a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The (key, value) pairs of the dictionary</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of reversed(&lt;dict&gt;.keys())?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of reversed(&lt;dict&gt;.keys())?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Keys in LIFO order</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What Python version introduced dict union operators?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What Python version introduced dict union operators?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Python 3.9</p></div>
            
            <div class=""prettify-tags"">python versions</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you update a dictionary with overlapping keys?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you update a dictionary with overlapping keys?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The value in dict_one is overwritten</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you merge two dictionaries using the union operator?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you merge two dictionaries using the union operator?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>dict_one | dict_two</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to iterate over dictionary items in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to iterate over dictionary items in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use for item in &lt;dict&gt;.items()</p></div>
            
            <div class=""prettify-tags"">iteration python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is preserved in dictionaries from Python 3.7+?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is preserved in dictionaries from Python 3.7+?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The order of entries</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>default ordering</strong> for a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>default ordering</strong> for a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Last in, first out (LIFO)</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you <strong>sort a dictionary</strong> by keys?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you <strong>sort a dictionary</strong> by keys?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;sorted()&lt;/code&gt; with &lt;code&gt;.items()&lt;/code&gt; to create a new dict.</p></div>
            
            <div class=""prettify-tags"">python sorting</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What function is used to <strong>sort dictionary values</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What function is used to <strong>sort dictionary values</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;sorted()&lt;/code&gt; with a key function (lambda).</p></div>
            
            <div class=""prettify-tags"">python sorting</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>swap keys and values</strong> in a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>swap keys and values</strong> in a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Iterate with &lt;code&gt;dict.items()&lt;/code&gt; or use a comprehension.</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>concern when swapping</strong> dictionary keys and values?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>concern when swapping</strong> dictionary keys and values?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Ensure keys and values are both hashable and unique.</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>handle duplicates</strong> when swapping dictionary values?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>handle duplicates</strong> when swapping dictionary values?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use a list to hold multiple keys for the same value.</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>set</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>set</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A mutable and unordered collection of distinct hashable objects.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What operations can be performed on <strong>sets</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What operations can be performed on <strong>sets</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li>Iteration</li>
<li>Membership checking</li>
<li>Length calculation</li>
<li>Shallow copies</li>
</ul></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What operations are <strong>not supported</strong> by sets?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What operations are <strong>not supported</strong> by sets?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li>Indexing</li>
<li>Ordering</li>
<li>Slicing</li>
<li>Concatenation</li>
</ul></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the average time complexity for <strong>membership checking</strong> in a set?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the average time complexity for <strong>membership checking</strong> in a set?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Constant time complexity (on average).</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can a <strong>set</strong> be created?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can a <strong>set</strong> be created?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li>Using set literals with curly braces</li>
<li>Using the set() constructor</li>
<li>Using set comprehension</li>
</ul></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How are <strong>duplicates</strong> handled in sets?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How are <strong>duplicates</strong> handled in sets?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Duplicates are silently omitted when creating a set.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>set constructor</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>set constructor</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The set constructor is set() and can be used with any iterable.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the difference between <strong>sets</strong> and <strong>frozensets</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the difference between <strong>sets</strong> and <strong>frozensets</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Sets are mutable, while frozensets are immutable.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you create an <strong>empty set</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you create an <strong>empty set</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using the constructor: &lt;code&gt;no_elements = set()&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How are <strong>duplicates handled</strong> when creating a set from a tuple?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How are <strong>duplicates handled</strong> when creating a set from a tuple?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Duplicates are removed automatically.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the command &lt;code&gt;set([2, 3, 2, 3, 3, 3, 5, 7, 11, 7, 11, 13, 13])&lt;/code&gt; return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the command &lt;code&gt;set([2, 3, 2, 3, 3, 3, 5, 7, 11, 7, 11, 13, 13])&lt;/code&gt; return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>{2, 3, 5, 7, 11, 13}</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>set comprehension</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>set comprehension</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A concise way to create sets, e.g., &lt;code&gt;{item**2 for item in numbers if item % 3 == 0}&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">comprehensions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you use a <strong>string</strong> with the set constructor?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you use a <strong>string</strong> with the set constructor?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The string is unpacked, and each character is added individually.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>Can you use a <strong>list</strong> as an element in a set?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>Can you use a <strong>list</strong> as an element in a set?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>No, it raises a TypeError: 'unhashable type: list'.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>frozenset</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>frozenset</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>An immutable version of a set that can be used as a set element.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you add an item to a set?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you add an item to a set?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using the method &lt;code&gt;&lt;set&gt;.add(&lt;item&gt;)&lt;/code&gt;.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;set&gt;.remove(&lt;item&gt;)&lt;/code&gt; do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;set&gt;.remove(&lt;item&gt;)&lt;/code&gt; do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Removes an item; raises KeyError if item not found.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the difference between &lt;code&gt;&lt;set&gt;.discard(&lt;item&gt;)&lt;/code&gt; and &lt;code&gt;&lt;set&gt;.remove(&lt;item&gt;)&lt;/code&gt;?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the difference between &lt;code&gt;&lt;set&gt;.discard(&lt;item&gt;)&lt;/code&gt; and &lt;code&gt;&lt;set&gt;.remove(&lt;item&gt;)&lt;/code&gt;?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;discard&lt;/code&gt; does not raise KeyError if item not found.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;set&gt;.clear()&lt;/code&gt; do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;set&gt;.clear()&lt;/code&gt; do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Removes all items from the set.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;set&gt;.pop()&lt;/code&gt; do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;code&gt;&lt;set&gt;.pop()&lt;/code&gt; do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Removes and returns an arbitrary item; raises KeyError if empty.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of &lt;code&gt;&lt;set&gt;.isdisjoint(&lt;other_collection&gt;)&lt;/code&gt;?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of &lt;code&gt;&lt;set&gt;.isdisjoint(&lt;other_collection&gt;)&lt;/code&gt;?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Tests if two sets have no elements in common.</p></div>
            
            <div class=""prettify-tags"">python sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What method checks if two sets have <strong>no elements in common</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What method checks if two sets have <strong>no elements in common</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;set&gt;.isdisjoint(&lt;other_collection&gt;)</p></div>
            
            <div class=""prettify-tags"">methods sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;set&gt;.isdisjoint(&lt;other_collection&gt;) return if sets share elements?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;set&gt;.isdisjoint(&lt;other_collection&gt;) return if sets share elements?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>False</p></div>
            
            <div class=""prettify-tags"">methods sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of &lt;set&gt;.issubset(&lt;other_collection&gt;)?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of &lt;set&gt;.issubset(&lt;other_collection&gt;)?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Checks if all elements in &lt;set&gt; are in &lt;other_collection&gt;</p></div>
            
            <div class=""prettify-tags"">methods sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;set&gt;.issuperset(&lt;other_collection&gt;) check?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does &lt;set&gt;.issuperset(&lt;other_collection&gt;) check?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>If all elements in &lt;other_collection&gt; are in &lt;set&gt;</p></div>
            
            <div class=""prettify-tags"">methods sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What indicates a <strong>proper subset</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What indicates a <strong>proper subset</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;set&gt; &lt; &lt;other_set&gt; and &lt;set&gt; != &lt;other_set&gt;</p></div>
            
            <div class=""prettify-tags"">sets subsets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What indicates a <strong>proper superset</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What indicates a <strong>proper superset</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;set&gt; &gt; &lt;other_set&gt; and &lt;set&gt; != &lt;other_set&gt;</p></div>
            
            <div class=""prettify-tags"">sets supersets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the operator &lt;set&gt; &lt;= &lt;other_set&gt; signify?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the operator &lt;set&gt; &lt;= &lt;other_set&gt; signify?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;set&gt; is a subset of &lt;other_set&gt;</p></div>
            
            <div class=""prettify-tags"">operators sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the operator &lt;set&gt; &gt;= &lt;other_set&gt; signify?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the operator &lt;set&gt; &gt;= &lt;other_set&gt; signify?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;set&gt; is a superset of &lt;other_set&gt;</p></div>
            
            <div class=""prettify-tags"">operators sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>union</strong> method of a set return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>union</strong> method of a set return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A new set with elements from the original set and all other iterables.</p></div>
            
            <div class=""prettify-tags"">sets union</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>difference</strong> method of a set return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>difference</strong> method of a set return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A new set with elements from the original set that are not in others.</p></div>
            
            <div class=""prettify-tags"">difference sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>intersection</strong> method of a set return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>intersection</strong> method of a set return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A new set with elements common to the original set and all others.</p></div>
            
            <div class=""prettify-tags"">intersection sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>symmetric difference</strong> method of a set return?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>symmetric difference</strong> method of a set return?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A new set that contains elements in either set but not in both.</p></div>
            
            <div class=""prettify-tags"">sets symmetric_difference</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>operator form</strong> for set union?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>operator form</strong> for set union?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;set&gt; | &lt;other set 1&gt; | &lt;other set 2&gt; | ...</p></div>
            
            <div class=""prettify-tags"">sets union</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>operator form</strong> for set difference?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>operator form</strong> for set difference?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;set&gt; - &lt;other set 1&gt; - &lt;other set 2&gt; - ...</p></div>
            
            <div class=""prettify-tags"">difference sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>operator form</strong> for set intersection?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>operator form</strong> for set intersection?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;set&gt; &amp; &lt;other set&gt; &amp; &lt;other set 2&gt; &amp; ...</p></div>
            
            <div class=""prettify-tags"">intersection sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>operator form</strong> for symmetric difference?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>operator form</strong> for symmetric difference?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;set&gt; ^ &lt;other set&gt;</p></div>
            
            <div class=""prettify-tags"">sets symmetric_difference</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>proper subset</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>proper subset</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A set is a proper subset if it is not equal to the other set.</p></div>
            
            <div class=""prettify-tags"">sets subset</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of a set being a <strong>proper subset</strong> of itself?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of a set being a <strong>proper subset</strong> of itself?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>False.</p></div>
            
            <div class=""prettify-tags"">sets subset</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>symmetric difference</strong> of two sets include?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>symmetric difference</strong> of two sets include?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Elements unique to each set and elements shared among more than two sets.</p></div>
            
            <div class=""prettify-tags"">mathematics sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>result</strong> of the symmetric difference operation?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>result</strong> of the symmetric difference operation?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Includes elements unique to each set and shared elements from multiple sets.</p></div>
            
            <div class=""prettify-tags"">mathematics sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you obtain <strong>unique items</strong> from multiple sets?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you obtain <strong>unique items</strong> from multiple sets?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Aggregate intersections of all 2-set combinations and remove them.</p></div>
            
            <div class=""prettify-tags"">mathematics sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>purpose of intersections</strong> in set operations?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>purpose of intersections</strong> in set operations?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>To identify overlapping members across multiple sets.</p></div>
            
            <div class=""prettify-tags"">mathematics sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>result of (one ^ two ^ three ^ four)</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>result of (one ^ two ^ three ^ four)</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Includes overlapping members that need to be removed for a clean result.</p></div>
            
            <div class=""prettify-tags"">mathematics sets</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>unpacking</strong> operation do in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>unpacking</strong> operation do in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Extracts elements of a collection and assigns them to variables.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>multiple assignment</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>multiple assignment</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Assigning multiple variables to unpacked values in one statement.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>'*' operator</strong> do in unpacking?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>'*' operator</strong> do in unpacking?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Combines multiple lists/tuples into one by unpacking them.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the '<strong>' operator</strong> do in unpacking?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the '<strong>' operator</strong> do in unpacking?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Combines multiple dictionaries into one by unpacking them.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>combine multiple dictionaries</strong> into one?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>combine multiple dictionaries</strong> into one?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>By unpacking each into a new common dict.</p></div>
            
            <div class=""prettify-tags"">dictionaries python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>* operator</strong> do when unpacking?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>* operator</strong> do when unpacking?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It packs a number of values into a list.</p></div>
            
            <div class=""prettify-tags"">operators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>multiple assignment</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>multiple assignment</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Assigning multiple variables at once, e.g., a, b = 1, 2.</p></div>
            
            <div class=""prettify-tags"">assignment python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens with <strong>incorrect multiple assignment</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens with <strong>incorrect multiple assignment</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A ValueError is thrown if the number of variables doesn't match values.</p></div>
            
            <div class=""prettify-tags"">errors python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>swap elements in lists</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>swap elements in lists</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use: numbers[0], numbers[1] = numbers[1], numbers[0].</p></div>
            
            <div class=""prettify-tags"">lists python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>deep unpacking</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>deep unpacking</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Unpacking values from nested lists/tuples into variables.</p></div>
            
            <div class=""prettify-tags"">python unpacking</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>capture leftover values</strong> when unpacking?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to <strong>capture leftover values</strong> when unpacking?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use the * operator to pack remaining values into a list.</p></div>
            
            <div class=""prettify-tags"">python unpacking</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>syntax for unpacking lists</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>syntax for unpacking lists</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>x, y, z = fruits where fruits is a list.</p></div>
            
            <div class=""prettify-tags"">python unpacking</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>_</strong> signify in unpacking?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>_</strong> signify in unpacking?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It flags values that are not needed.</p></div>
            
            <div class=""prettify-tags"">python unpacking</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>unpacking with incorrect values</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of <strong>unpacking with incorrect values</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A ValueError occurs for incorrect placement or number of values.</p></div>
            
            <div class=""prettify-tags"">errors python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does unpacking a list in Python allow you to do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does unpacking a list in Python allow you to do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Extract elements into variables</p></div>
            
            <div class=""prettify-tags"">python unpacking</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you unpack all elements except the first from a list?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you unpack all elements except the first from a list?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>x, *last = fruits</p></div>
            
            <div class=""prettify-tags"">python unpacking</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does 'x' represent in the unpacking example?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does 'x' represent in the unpacking example?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The first element of the list</p></div>
            
            <div class=""prettify-tags"">python unpacking</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you extract middle values while unpacking?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you extract middle values while unpacking?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>x, *middle, y, z = fruits</p></div>
            
            <div class=""prettify-tags"">python unpacking</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does 'y' represent in the unpacking example?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does 'y' represent in the unpacking example?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The second last element of the list</p></div>
            
            <div class=""prettify-tags"">python unpacking</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you unpack a dictionary's keys in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you unpack a dictionary's keys in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>x, y, z = fruits_inventory</p></div>
            
            <div class=""prettify-tags"">python unpacking</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you unpack the values from a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you unpack the values from a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>x, y, z = fruits_inventory.values()</p></div>
            
            <div class=""prettify-tags"">python unpacking</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What method is used to unpack both keys and values from a dictionary?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What method is used to unpack both keys and values from a dictionary?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use fruits_inventory.items()</p></div>
            
            <div class=""prettify-tags"">python unpacking</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is packing in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is packing in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Grouping multiple values into one list/tuple</p></div>
            
            <div class=""prettify-tags"">packing python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you pack a list using the * operator?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you pack a list using the * operator?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>combined_fruits = <em>fruits, </em>more_fruits</p></div>
            
            <div class=""prettify-tags"">packing python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of using * on the left side of '='?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the result of using * on the left side of '='?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Creates a list</p></div>
            
            <div class=""prettify-tags"">packing python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you pack a dictionary using the ** operator?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you pack a dictionary using the ** operator?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>combined_fruits_inventory = {<strong>fruits_inventory, </strong>more_fruits_inventory}</p></div>
            
            <div class=""prettify-tags"">packing python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of *args in function definitions?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of *args in function definitions?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>To accept an arbitrary number of arguments</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>*args</strong> do in a function?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>*args</strong> do in a function?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Packs an arbitrary number of positional arguments into a tuple.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>**kwargs</strong> do in a function?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>**kwargs</strong> do in a function?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Packs an arbitrary number of keyword arguments into a dictionary.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you define a function that accepts both <strong>*args</strong> and <strong>**kwargs</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you define a function that accepts both <strong>*args</strong> and <strong>**kwargs</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use the syntax: &lt;code&gt;def my_function(*args, **kwargs):&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the correct order of parameters in a function?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the correct order of parameters in a function?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;positional_args&gt;, *args, &lt;key-word_args&gt;, **kwargs</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if you don't follow the parameter order?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens if you don't follow the parameter order?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>You will get a TypeError.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you unpack a list into a function call?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you unpack a list into a function call?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use the syntax: &lt;code&gt;my_function(*list)&lt;/code&gt;.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>zip()</strong> function do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>zip()</strong> function do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It combines multiple iterables into a list of tuples.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What are classes in Python used for?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What are classes in Python used for?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>To create instances (objects) that bundle data and behavior.</p></div>
            
            <div class=""prettify-tags"">classes python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a class in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a class in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A blueprint for creating objects with attributes and methods.</p></div>
            
            <div class=""prettify-tags"">classes python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What do you call the data bundled within a class?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What do you call the data bundled within a class?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Fields, attributes, or properties.</p></div>
            
            <div class=""prettify-tags"">classes python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What do you call the functions defined in a class?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What do you call the functions defined in a class?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Methods.</p></div>
            
            <div class=""prettify-tags"">classes python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of object-oriented programming (OOP)?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of object-oriented programming (OOP)?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>To model problems as interacting objects that maintain state.</p></div>
            
            <div class=""prettify-tags"">oop python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>class</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>class</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A blueprint for creating objects, defining attributes and methods.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>instantiation</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>instantiation</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The process of creating an instance of a class.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What are <strong>class attributes</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What are <strong>class attributes</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Properties shared across all instances of a class.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to access <strong>class attributes</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to access <strong>class attributes</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Using dot notation: &lt;code&gt;object.attribute&lt;/code&gt;.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>&lt;code&gt;__init__()&lt;/code&gt;</strong> method do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>&lt;code&gt;__init__()&lt;/code&gt;</strong> method do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Initializes instance attributes when a class is instantiated.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>self</strong> parameter?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>self</strong> parameter?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Refers to the instance of the class being created.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to modify a <strong>class attribute</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to modify a <strong>class attribute</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Directly change it via the class name: &lt;code&gt;ClassName.attribute = value&lt;/code&gt;.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What are <strong>instance attributes</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What are <strong>instance attributes</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Unique properties for each object created from a class.</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>Example of a <strong>class definition</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>Example of a <strong>class definition</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;class MyClass:&lt;/code&gt;
&lt;code&gt;# Class body goes here&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to create an <strong>object</strong> of a class?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How to create an <strong>object</strong> of a class?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>&lt;code&gt;new_object = MyClass()&lt;/code&gt;</p></div>
            
            <div class=""prettify-tags"">programming python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What are the <strong>class attributes</strong> in MyClass?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What are the <strong>class attributes</strong> in MyClass?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><ul>
<li><strong>number</strong> = 5</li>
<li><strong>string</strong> = 'Hello!'</li>
</ul></div>
            
            <div class=""prettify-tags"">classes python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong><strong>init</strong>()</strong> method do in MyClass?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong><strong>init</strong>()</strong> method do in MyClass?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It initializes instance variables <strong>location_x</strong> and <strong>location_y</strong> from the <strong>location</strong> tuple.</p></div>
            
            <div class=""prettify-tags"">initialization python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you create an instance of MyClass?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you create an instance of MyClass?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>By passing a tuple to the constructor, e.g., <strong>MyClass((1, 2))</strong>.</p></div>
            
            <div class=""prettify-tags"">classes python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens to <strong>location_x</strong> in new_object_one and new_object_two?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens to <strong>location_x</strong> in new_object_one and new_object_two?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>They have different values: <strong>1</strong> and <strong>-8</strong> respectively.</p></div>
            
            <div class=""prettify-tags"">objects python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is an <strong>instance variable</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is an <strong>instance variable</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A variable that belongs to a specific instance of a class, like <strong>self.location_x</strong>.</p></div>
            
            <div class=""prettify-tags"">python variables</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you change a class variable via an object?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you change a class variable via an object?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It becomes an instance variable for that object, shadowing the class variable.</p></div>
            
            <div class=""prettify-tags"">python variables</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of <strong>@classmethod</strong> decorator?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of <strong>@classmethod</strong> decorator?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>To define a method that can be called on the class itself, without creating an instance.</p></div>
            
            <div class=""prettify-tags"">methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the first parameter of instance methods?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the first parameter of instance methods?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p><strong>self</strong>, which refers to the instance of the class.</p></div>
            
            <div class=""prettify-tags"">methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the first parameter of class methods?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the first parameter of class methods?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p><strong>cls</strong>, which refers to the class itself.</p></div>
            
            <div class=""prettify-tags"">methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the method <strong>change_location</strong> do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the method <strong>change_location</strong> do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It adjusts <strong>location_x</strong> and <strong>location_y</strong> by a specified amount.</p></div>
            
            <div class=""prettify-tags"">methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What keyword is used as a placeholder in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What keyword is used as a placeholder in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p><strong>pass</strong></p></div>
            
            <div class=""prettify-tags"">keywords python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>change_location</strong> method do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>change_location</strong> method do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Alters <strong>location_x</strong> and <strong>location_y</strong> by a specified amount.</p></div>
            
            <div class=""prettify-tags"">methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>self</strong> in Python methods?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is <strong>self</strong> in Python methods?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Refers to the instance of the class.</p></div>
            
            <div class=""prettify-tags"">object-oriented python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you access class attributes in instance methods?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you access class attributes in instance methods?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use &lt;code&gt;MyClass.attribute_name&lt;/code&gt; syntax.</p></div>
            
            <div class=""prettify-tags"">class python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>increment_number</strong> method do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>increment_number</strong> method do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Increments the class variable <strong>number</strong> by 1.</p></div>
            
            <div class=""prettify-tags"">class python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>generator</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>generator</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A function that returns a <strong>generator iterator</strong>.</p></div>
            
            <div class=""prettify-tags"">generators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>yield</strong> do in a generator function?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does <strong>yield</strong> do in a generator function?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Suspends code execution and saves state.</p></div>
            
            <div class=""prettify-tags"">generators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of the <strong><strong>init</strong></strong> method?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the purpose of the <strong><strong>init</strong></strong> method?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Initializes instance variables when an object is created.</p></div>
            
            <div class=""prettify-tags"">constructor python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you call a method on an object?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when you call a method on an object?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Python automatically passes the object as <strong>self</strong>.</p></div>
            
            <div class=""prettify-tags"">methods python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>generator iterator</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>generator iterator</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>An iterator that generates values lazily, on demand.</p></div>
            
            <div class=""prettify-tags"">generators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>generator</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>generator</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A generator is a special type of iterator that yields values one at a time, allowing for lazy evaluation and saving memory.</p></div>
            
            <div class=""prettify-tags"">generators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>yield</strong> keyword do?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What does the <strong>yield</strong> keyword do?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The yield keyword pauses the function, returning a value to the caller and saving the function's state for later resumption.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How does a generator differ from a <strong>regular function</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How does a generator differ from a <strong>regular function</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A generator uses yield to return values one at a time, while a regular function returns all values at once.</p></div>
            
            <div class=""prettify-tags"">functions python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when a generator is fully consumed?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when a generator is fully consumed?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It raises a StopIteration error when there are no more values to return.</p></div>
            
            <div class=""prettify-tags"">generators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you access values from a generator?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How can you access values from a generator?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Values can be accessed using a for loop or the next() function.</p></div>
            
            <div class=""prettify-tags"">generators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What are the <strong>memory benefits</strong> of using generators?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What are the <strong>memory benefits</strong> of using generators?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Generators save memory by yielding values one at a time instead of storing all values in memory at once.</p></div>
            
            <div class=""prettify-tags"">memory python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>Can generators be <strong>reset</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>Can generators be <strong>reset</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>No, generators are one-way and cannot be reset to a previous value once iterated over.</p></div>
            
            <div class=""prettify-tags"">generators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is an example of a <strong>simple generator</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is an example of a <strong>simple generator</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>The infinite_sequence() function that yields an increasing sequence of numbers indefinitely.</p></div>
            
            <div class=""prettify-tags"">generators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of <strong>next()</strong> on a generator?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the output of <strong>next()</strong> on a generator?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It returns the next value produced by the generator until it raises StopIteration.</p></div>
            
            <div class=""prettify-tags"">generators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the difference between <strong>iterables</strong> and <strong>generators</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the difference between <strong>iterables</strong> and <strong>generators</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Generators are a subset of iterators that yield values lazily, while iterables can be looped over multiple times.</p></div>
            
            <div class=""prettify-tags"">iterables python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>generator</strong> in Python?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is a <strong>generator</strong> in Python?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>A generator is a type of iterable that allows you to iterate over a sequence of values without storing them all in memory at once.</p></div>
            
            <div class=""prettify-tags"">generators python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>Why use a <strong>generator</strong>?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>Why use a <strong>generator</strong>?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Generators save memory and improve performance by yielding values one at a time instead of storing all values in memory.</p></div>
            
            <div class=""prettify-tags"">memory python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>syntax</strong> for defining a generator function?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What is the <strong>syntax</strong> for defining a generator function?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Use the &lt;code&gt;def&lt;/code&gt; keyword and include &lt;code&gt;yield&lt;/code&gt; statements within the function.</p></div>
            
            <div class=""prettify-tags"">python syntax</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you get the next value from a generator?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>How do you get the next value from a generator?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>Call the &lt;code&gt;__next__()&lt;/code&gt; method on the generator object.</p></div>
            
            <div class=""prettify-tags"">python usage</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when <strong><strong>next</strong>()</strong> is called on the generator?</p></div>
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "	"
        <div class=""prettify-flashcard"">
            <div class=""prettify-deck"">Exercism::Python - part 2</div>
            <div class=""prettify-field prettify-field--front""><p>What happens when <strong><strong>next</strong>()</strong> is called on the generator?</p></div>
            <div class=""prettify-divider prettify-divider--answer"" id=""answer""></div>
            <div class=""prettify-field prettify-field--back""><p>It returns the current number and increments it by 1 for the next call.</p></div>
            
            <div class=""prettify-tags"">functionality python</div>
            
        </div>
        
<script>
    var tagsContainerEl = document.querySelectorAll("".prettify-tags > *"");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add(""prettify-tag"");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split(""::"").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector("".prettify-tags"");
        var tags = tagsContainerEl.innerHTML.split("" "").filter(Boolean);
        var html = """";
        tags.forEach((tag) => {
            var childTag = tag.split(""::"").filter(Boolean);
            html += ""<span class='prettify-tag'>"" + childTag[childTag.length - 1] + ""</span>"";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    var deckEl = document.querySelector("".prettify-deck"");
    var subDecks = deckEl.innerHTML.split(""::"").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push(""<span class='prettify-subdeck'>"" + subDeck + ""</span>"");
    });
    deckEl.innerHTML = html.join(""&nbsp;/&nbsp;"");
</script>

    "
